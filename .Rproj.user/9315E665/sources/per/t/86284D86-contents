---
title: "Task_4_Analysis"
output: html_notebook
---
when cleaning the data, it was assumed that the usefull collumbs of review data would have been the columbs that all 3 have in common.
it is assumed that all candys have the same name in the data and that the overlapping candys are the important ones.
specific omissions and inclusions have also been manually added where appropriate, however much of the selection was performed by overlap testing.

```{r}
library(tidyverse)
library(here)
library(stringr)

candy_data <- read.csv(here("clean_data/candy_data_clean.csv"))
candy_data
```
total number of valid reviews
```{r}
sum(!is.na(candy_data[8:ncol(candy_data)]))
```

What was the average age of people who are going out trick or treating
35.01655
What was the average age of people who are not going trick or treating
39.123
in this question it is to be noted that non respondants or invalid respondants to the question will not be taken into account.
```{r}
age_going = filter(candy_data, going == "Yes")
mean(age_going$age, na.rm = TRUE)
age_not_going = filter(candy_data, going == "No")
mean(age_not_going$age, na.rm = TRUE)
```

For each of joy, despair and meh, which candy bar revived the most of these ratings?
joy = any full sized candy bar
meh = lollipops
despair = gum_from_baseball_cards
```{r}
review_table = data.frame()

for (i in 8:ncol(candy_data)){
review_table[i-7,1] <- sum(candy_data[i] == "JOY", na.rm = TRUE)
review_table[i-7,2] <- sum(candy_data[i] == "MEH", na.rm = TRUE)
review_table[i-7,3] <- sum(candy_data[i] == "DESPAIR", na.rm = TRUE)
}

rownames(review_table) <- colnames(candy_data[8:ncol(candy_data)])
colnames(review_table) <- c("JOY","MEH","DISPAIR")

slice_max(review_table, JOY)
slice_max(review_table, MEH)
slice_max(review_table, DISPAIR)
```

How many people rated Starburst as despair
1990
```{r}
sum(candy_data$starburst == "DESPAIR", na.rm = TRUE)
```

preperation for 6, 7 & 8 
conversion of strings to numerical values which can then be analysed

```{r}
candy_data[candy_data == "JOY"] <- 1
candy_data[candy_data == "MEH"] <- 0
candy_data[candy_data == "DESPAIR"] <- -1

for(i in 8:ncol(candy_data)){
  candy_data[,i] = as.numeric(candy_data[,i])
}

candy_data
```
for all following questions, the non valid values are not taken into account and thus the conclusions drawn may be from imbalanced data,
further investigation into the datas balening and biases must be conducted for meaningfull results

What was the most popular candy bar by this rating system for each gender in the dataset 
any full sized candy bar was the most popular, however the males rated it higher than the females
```{r}
male_data = filter(candy_data, gender == "Male")
female_data = filter(candy_data, gender == "Female")

male_data = colSums(male_data[,8:ncol(male_data)], na.rm = TRUE)
female_data = colSums(female_data[,8:ncol(female_data)], na.rm = TRUE)

tail(sort(male_data), 1)
tail(sort(female_data), 1)
```

What was the most popular candy bar in each year
any full size candy bar is still the most popular, however it has its highest rateing by a signifcant margine in 2015
```{r}
year_2015 = filter(candy_data, year == "2015")
year_2016 = filter(candy_data, year == "2016")
year_2017 = filter(candy_data, year == "2017")

year_2015 = colSums(year_2015[,8:ncol(year_2015)], na.rm = TRUE)
year_2016 = colSums(year_2016[,8:ncol(year_2016)], na.rm = TRUE)
year_2017 = colSums(year_2017[,8:ncol(year_2017)], na.rm = TRUE)

tail(sort(year_2015), 1)
tail(sort(year_2016), 1)
tail(sort(year_2017), 1)
```
What was the most popular candy bar by this rating for people in US, Canada, UK, and all other countries
the most popular candy bar in the uk was the toblerone with a rateing of 34
the US, Canada and other countries all prefered the full size candy bar with rateings of 2176, 251 and 85 respectivly
it should be noted that the US has the highest overall rateing
```{r}
UK = filter(candy_data, country == "UK")
US = filter(candy_data, country == "US")
Canada = filter(candy_data, country == "Canada")
Other = filter(candy_data, country == "Other")

UK = colSums(UK[,8:ncol(UK)], na.rm = TRUE)
US = colSums(US[,8:ncol(US)], na.rm = TRUE)
Canada = colSums(Canada[,8:ncol(Canada)], na.rm = TRUE)
Other = colSums(Other[,8:ncol(Other)], na.rm = TRUE)

tail(sort(UK), 1)
tail(sort(US), 1)
tail(sort(Canada), 1)
tail(sort(Other), 1)
```

firther investigate more efficiant method than assighning new variable for this specific set of problems for code readability and efficiancy..